<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    
    <TargetFrameworks>netstandard1.6;netstandard2.0;net40;net45</TargetFrameworks>
    
    <SignAssembly>true</SignAssembly>
    <AssemblyOriginatorKeyFile>key.snk</AssemblyOriginatorKeyFile>
    <DelaySign>false</DelaySign>
    <Title>UnityAutoRegistration</Title>
    <AssemblyName>Unity.AutoRegistration</AssemblyName>
    <RootNamespace>Unity.AutoRegistration</RootNamespace>
    <Description>Unity Auto Registration extends the Unity IoC container and provides a fluent syntax to configure rules for automatic type registration. Using few lines of code you can scan specified assemblies and register all types that satisfy your rules.

Rules for determining whether to include/exclude types/assemblies are predicates (Predicate&lt;T&gt;) so you can use lambda syntax or direct method name to specify them. There are a few methods in an If helper class (like Implements, DecoratedWith) to cover some common scenarios of type registration.</Description>
    <Copyright>Artem Govorov &amp; Alexander Stärk</Copyright>
    <PackageId>UnityAutoRegistration</PackageId>
    <Product>Unity Auto Registration</Product>
    <Authors>agovorov,astaerk</Authors>
    <Company>agovorov,astaerk</Company>
    <NeutralLanguage>en-AU</NeutralLanguage>
    <VersionPrefix>2.1.0</VersionPrefix>
    <VersionSuffix Condition=" $(TF_BUILD)!='true' ">alpha</VersionSuffix>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <FileVersion>2.1.0.0</FileVersion>
    <InformationalVersion>2.1.0.0</InformationalVersion>
    <PackageLicenseUrl>https://github.com/astaerk/AutoRegistration/blob/master/LICENSE.md</PackageLicenseUrl>
    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
    <PackageProjectUrl>https://github.com/astaerk/AutoRegistration</PackageProjectUrl>
    <PackageTags>.NET Auto-registration Autoregistration dependency-container dependency-injection Enterprise-Library Fluent-Interface Inversion-of-Control IoC DI lambda Unity</PackageTags>
    <PackageReleaseNotes>- update to Unity 5.1.2 as minimum requirement (includes fixes for .Net Standard)
- support for .NET Standard 1.6 and higher
- support for .NET Framework 4.0 and higher</PackageReleaseNotes>
    <!--<PackageIconUrl>http://www.url.de/nuget_icon.png</PackageIconUrl>-->
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)'=='Release'">
	<GeneratePackageOnBuild>true</GeneratePackageOnBuild>
  </PropertyGroup>
  
  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Debug|netstandard1.6|AnyCPU'">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <WarningLevel>3</WarningLevel>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Unity" Version="5.3.2" />
  </ItemGroup>

  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.6'">
    <PackageReference Include="System.Reflection.TypeExtensions">
      <Version>4.4.0</Version>
    </PackageReference>
    <PackageReference Include="System.Runtime.Loader">
      <Version>4.3.0</Version>
    </PackageReference>
	  <PackageReference Include="Microsoft.Extensions.DependencyModel" Version="2.0.0" />
  </ItemGroup>

  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard2.0'">
    <PackageReference Include="System.Reflection.TypeExtensions">
      <Version>4.4.0</Version>
    </PackageReference>
  </ItemGroup>

</Project>
